{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","views/ContactsView.module.css","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","views/ContactsView.js"],"names":["module","exports","fetchContactRequest","actions","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateContactRequest","updateContactSuccess","updateContactError","fetchContact","dispatch","axios","get","then","data","catch","error","addContact","contacts","name","number","isInContacts","some","contact","alert","post","deleteContact","contactId","delete","updateContact","update","patch","getContacts","state","items","getFilter","filter","getTotalContacts","length","getError","getLoadingStatus","loading","getFiltredContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useDispatch","useSelector","ContactsSelectors","useState","setName","setNumber","handleChange","event","target","value","onSubmit","preventDefault","ContactsOperations","className","s","form","method","label","input","type","pattern","title","onChange","required","button","Filter","ContactsActions","changeFilter","currentTarget","ContactList","useEffect","list","map","id","item","onClick","ContactsView","totalContacts"],"mappings":"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","file":"static/js/ContactsView.e585c445.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__Kamce\",\"label\":\"ContactForm_label__38p1q\",\"input\":\"ContactForm_input__3bX8w\",\"button\":\"ContactForm_button__EWkB3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__3f-J6\",\"input\":\"Filter_input__2QjR3\",\"label\":\"Filter_label__1snNj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__yQ0Lc\",\"item\":\"ContactList_item__1yycx\",\"name\":\"ContactList_name__3F3K0\",\"button\":\"ContactList_button__1mbbc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsView_contacts__-BkNl\"};","import axios from 'axios';\nimport * as actions from './contacts-actions';\n\nconst { fetchContactRequest, fetchContactSuccess, fetchContactError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, updateContactRequest, updateContactSuccess, updateContactError } = actions;\n\nexport const fetchContact = () => dispatch => {\n    dispatch(fetchContactRequest());\n\n    axios.get('/contacts').then(({ data }) => dispatch(fetchContactSuccess(data))).catch(error => dispatch(fetchContactError(error)));\n};\n\nexport const addContact = (contacts, name, number) => dispatch => {\n    // const isInContacts = contacts.some(contact => contact.name === name);\n    //     if (isInContacts) { \n    //         let replaceAgreement = window.confirm(`${name} is already in contacts. Replace ${name} number?`);\n\n    //         if (!replaceAgreement) {\n    //             const update = { number };\n    //             dispatch(updateContactRequest());\n\n    //             axios\n    //             .patch(`/contacts/${name}`, update)\n    //             .then(({ data }) => dispatch(updateContactSuccess(data)))\n    //             .catch(error => dispatch(updateContactError(error)));\n    //         }\n    const isInContacts = contacts.some(contact => contact.name === name);\n        if (isInContacts) { \n            alert(`${name} is already in contacts`);\n            return;\n        }    \n    const contact = {\n        name, \n        number\n    };\n\n    dispatch(addContactRequest());\n\n    axios.post('/contacts', contact).then(({ data }) => dispatch(addContactSuccess(data))).catch(error => dispatch(addContactError(error)));\n// }\n};\n\nexport const deleteContact = contactId => dispatch => {\n    dispatch(deleteContactRequest());\n\n    axios.delete(`/contacts/${contactId}`).then(() => dispatch(deleteContactSuccess(contactId))).catch(error => dispatch(deleteContactError(error)));\n};\n\nexport const updateContact = (contactId, number) => dispatch => {\n    const update = { number };\n    dispatch(updateContactRequest());\n\n    axios.patch(`/contacts/${contactId}`, update).then(({ data }) => dispatch(updateContactSuccess(data))).catch(error => dispatch(updateContactError(error)));\n};\n\n// const operations = { fetchContact, addContact, deleteContact, updateContact };\n// export default operations;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getTotalContacts = state => state.contacts.items.length;\nexport const getError = state => state.contacts.error;\nexport const getLoadingStatus = state => state.contacts.loading;\n\nexport const getFiltredContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n      const normalizedFilter = filter.toLowerCase();  \n      return contacts.filter(contact => contact.name.includes(normalizedFilter),\n      );\n    },\n  );\n\n// export const getFiltredContacts = state => {\n//     const contacts = getContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n   \n//     return contacts.filter(contact => contact.name.includes(normalizedFilter))};\n\n","\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from '../ContactForm/ContactForm.module.css'\r\nimport { ContactsSelectors, ContactsOperations } from '../../redux/phonebook';\r\n\r\n\r\nexport default function ContactForm() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(ContactsSelectors.getFiltredContacts);\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        dispatch(ContactsOperations.addContact(contacts, name, number));\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form} method=\"post\">\r\n            <label className={s.label}>\r\n                Name\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    onChange={handleChange}\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.label}>\r\n                Phone Number\r\n                <input\r\n                    className={s.input}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    onChange={handleChange}\r\n                    required\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className={s.button}>\r\n                Add Contact\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\nContactForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsSelectors, ContactsActions } from '../../redux/phonebook';\n\nexport default function Filter() {\n    const filter = useSelector(ContactsSelectors.getFilter);\n    const dispatch = useDispatch();\n    const onChangeFilter = event => {\n        dispatch(ContactsActions.changeFilter(event.currentTarget.value))\n    };\n    return (\n        <form className={s.form}>\n            <label className={s.label}>\n                Find contacts by name\n                <input type=\"text\" value={filter} required onChange={onChangeFilter} className={s.input} />\n            </label>\n        </form>\n    );\n}\nFilter.propTypes = {\n    filter: PropTypes.string,\n}\n","import React from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsSelectors, ContactsOperations } from '../../redux/phonebook';\n\nexport default function ContactList() {\n    const error = useSelector(ContactsSelectors.getError);\n    const loading = useSelector(ContactsSelectors.getLoadingStatus);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(ContactsOperations.fetchContact());\n    }, [dispatch]);\n    const contacts = useSelector(ContactsSelectors.getFiltredContacts);\n\n    return (\n        <>\n            {loading && <h2 className={s.loading}>Loading...</h2>}\n            {error && <h2 className={s.error}>{error}</h2>}\n            <ul className={s.list}>\n                {contacts.map(({ id, name, number }) => (\n                    <li key={id} className={s.item}>\n                        <p className={s.name}>{name}: <span>{number}</span></p>\n                        <button onClick={() => dispatch(ContactsOperations.deleteContact(id))} type=\"button\" className={s.button}>DELETE</button>\n\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n};\nContactList.propTypes = {\n    id: PropTypes.any,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}\n","import { useSelector } from 'react-redux';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport { ContactsSelectors } from '../redux/phonebook';\nimport s from '../views/ContactsView.module.css';\n\nfunction ContactsView() {\n  const totalContacts = useSelector(ContactsSelectors.getTotalContacts);\n  return (\n    <div className={s.contacts}>\n      <h2>Expand your contacts </h2>\n      <ContactForm />\n      <h2>Your contacts (total: {totalContacts}) </h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default ContactsView;"],"sourceRoot":""}